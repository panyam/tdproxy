# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import streamer_pb2 as protos_dot_streamer__pb2


class StreamerServiceStub(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/tdproxy_protos.StreamerService/Subscribe',
                request_serializer=protos_dot_streamer__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=protos_dot_streamer__pb2.Message.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/tdproxy_protos.StreamerService/Unsubscribe',
                request_serializer=protos_dot_streamer__pb2.Subscription.SerializeToString,
                response_deserializer=protos_dot_streamer__pb2.EmptyMessage.FromString,
                )
        self.Send = channel.unary_unary(
                '/tdproxy_protos.StreamerService/Send',
                request_serializer=protos_dot_streamer__pb2.SendRequest.SerializeToString,
                response_deserializer=protos_dot_streamer__pb2.SendResponse.FromString,
                )


class StreamerServiceServicer(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=protos_dot_streamer__pb2.SubscribeRequest.FromString,
                    response_serializer=protos_dot_streamer__pb2.Message.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=protos_dot_streamer__pb2.Subscription.FromString,
                    response_serializer=protos_dot_streamer__pb2.EmptyMessage.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=protos_dot_streamer__pb2.SendRequest.FromString,
                    response_serializer=protos_dot_streamer__pb2.SendResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tdproxy_protos.StreamerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamerService(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tdproxy_protos.StreamerService/Subscribe',
            protos_dot_streamer__pb2.SubscribeRequest.SerializeToString,
            protos_dot_streamer__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tdproxy_protos.StreamerService/Unsubscribe',
            protos_dot_streamer__pb2.Subscription.SerializeToString,
            protos_dot_streamer__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tdproxy_protos.StreamerService/Send',
            protos_dot_streamer__pb2.SendRequest.SerializeToString,
            protos_dot_streamer__pb2.SendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
