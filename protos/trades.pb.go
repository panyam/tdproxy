// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: protos/trades.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buy               bool    `protobuf:"varint,1,opt,name=buy,proto3" json:"buy,omitempty"`
	Quantity          int32   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OverriddenPremium float64 `protobuf:"fixed64,3,opt,name=overridden_premium,json=overriddenPremium,proto3" json:"overridden_premium,omitempty"`
}

func (x *OrderBase) Reset() {
	*x = OrderBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBase) ProtoMessage() {}

func (x *OrderBase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBase.ProtoReflect.Descriptor instead.
func (*OrderBase) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBase) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

func (x *OrderBase) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderBase) GetOverriddenPremium() float64 {
	if x != nil {
		return x.OverriddenPremium
	}
	return 0
}

type Single struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderBase   *OrderBase `protobuf:"bytes,1,opt,name=order_base,json=orderBase,proto3" json:"order_base,omitempty"`
	Symbol      string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	DateString  string     `protobuf:"bytes,3,opt,name=date_string,json=dateString,proto3" json:"date_string,omitempty"`
	PriceString string     `protobuf:"bytes,4,opt,name=price_string,json=priceString,proto3" json:"price_string,omitempty"`
	IsCall      bool       `protobuf:"varint,5,opt,name=is_call,json=isCall,proto3" json:"is_call,omitempty"`
}

func (x *Single) Reset() {
	*x = Single{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Single) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Single) ProtoMessage() {}

func (x *Single) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Single.ProtoReflect.Descriptor instead.
func (*Single) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{1}
}

func (x *Single) GetOrderBase() *OrderBase {
	if x != nil {
		return x.OrderBase
	}
	return nil
}

func (x *Single) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Single) GetDateString() string {
	if x != nil {
		return x.DateString
	}
	return ""
}

func (x *Single) GetPriceString() string {
	if x != nil {
		return x.PriceString
	}
	return ""
}

func (x *Single) GetIsCall() bool {
	if x != nil {
		return x.IsCall
	}
	return false
}

type Spread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderBase *OrderBase `protobuf:"bytes,1,opt,name=order_base,json=orderBase,proto3" json:"order_base,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Singles   []*Single  `protobuf:"bytes,3,rep,name=singles,proto3" json:"singles,omitempty"`
}

func (x *Spread) Reset() {
	*x = Spread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spread) ProtoMessage() {}

func (x *Spread) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spread.ProtoReflect.Descriptor instead.
func (*Spread) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{2}
}

func (x *Spread) GetOrderBase() *OrderBase {
	if x != nil {
		return x.OrderBase
	}
	return nil
}

func (x *Spread) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spread) GetSingles() []*Single {
	if x != nil {
		return x.Singles
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*Order_Single
	//	*Order_Spread
	Details isOrder_Details `protobuf_oneof:"details"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{3}
}

func (m *Order) GetDetails() isOrder_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Order) GetSingle() *Single {
	if x, ok := x.GetDetails().(*Order_Single); ok {
		return x.Single
	}
	return nil
}

func (x *Order) GetSpread() *Spread {
	if x, ok := x.GetDetails().(*Order_Spread); ok {
		return x.Spread
	}
	return nil
}

type isOrder_Details interface {
	isOrder_Details()
}

type Order_Single struct {
	Single *Single `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type Order_Spread struct {
	Spread *Spread `protobuf:"bytes,2,opt,name=spread,proto3,oneof"`
}

func (*Order_Single) isOrder_Details() {}

func (*Order_Spread) isOrder_Details() {}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId  string           `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Symbol   string           `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Date     string           `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Strategy string           `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Outlook  string           `protobuf:"bytes,5,opt,name=outlook,proto3" json:"outlook,omitempty"`
	Orders   []*Order         `protobuf:"bytes,6,rep,name=orders,proto3" json:"orders,omitempty"`
	Metadata *structpb.Struct `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Payoffs that user can provide
	PayoffExpectedGain float64 `protobuf:"fixed64,8,opt,name=payoff_expected_gain,json=payoffExpectedGain,proto3" json:"payoff_expected_gain,omitempty"`
	PayoffExpectedLoss float64 `protobuf:"fixed64,9,opt,name=payoff_expected_loss,json=payoffExpectedLoss,proto3" json:"payoff_expected_loss,omitempty"`
	PayoffGainProb     float64 `protobuf:"fixed64,10,opt,name=payoff_gain_prob,json=payoffGainProb,proto3" json:"payoff_gain_prob,omitempty"`
	PayoffBpe          float64 `protobuf:"fixed64,11,opt,name=payoff_bpe,json=payoffBpe,proto3" json:"payoff_bpe,omitempty"`
	PayoffMaxprofit    float64 `protobuf:"fixed64,12,opt,name=payoff_maxprofit,json=payoffMaxprofit,proto3" json:"payoff_maxprofit,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{4}
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Trade) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Trade) GetOutlook() string {
	if x != nil {
		return x.Outlook
	}
	return ""
}

func (x *Trade) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *Trade) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Trade) GetPayoffExpectedGain() float64 {
	if x != nil {
		return x.PayoffExpectedGain
	}
	return 0
}

func (x *Trade) GetPayoffExpectedLoss() float64 {
	if x != nil {
		return x.PayoffExpectedLoss
	}
	return 0
}

func (x *Trade) GetPayoffGainProb() float64 {
	if x != nil {
		return x.PayoffGainProb
	}
	return 0
}

func (x *Trade) GetPayoffBpe() float64 {
	if x != nil {
		return x.PayoffBpe
	}
	return 0
}

func (x *Trade) GetPayoffMaxprofit() float64 {
	if x != nil {
		return x.PayoffMaxprofit
	}
	return 0
}

type SaveTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades    []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	LogTrades bool     `protobuf:"varint,2,opt,name=log_trades,json=logTrades,proto3" json:"log_trades,omitempty"`
}

func (x *SaveTradesRequest) Reset() {
	*x = SaveTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTradesRequest) ProtoMessage() {}

func (x *SaveTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTradesRequest.ProtoReflect.Descriptor instead.
func (*SaveTradesRequest) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{5}
}

func (x *SaveTradesRequest) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *SaveTradesRequest) GetLogTrades() bool {
	if x != nil {
		return x.LogTrades
	}
	return false
}

type SaveTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveTradesResponse) Reset() {
	*x = SaveTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTradesResponse) ProtoMessage() {}

func (x *SaveTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTradesResponse.ProtoReflect.Descriptor instead.
func (*SaveTradesResponse) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{6}
}

type TradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criteria string `protobuf:"bytes,1,opt,name=criteria,proto3" json:"criteria,omitempty"`
}

func (x *TradeOrder) Reset() {
	*x = TradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeOrder) ProtoMessage() {}

func (x *TradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeOrder.ProtoReflect.Descriptor instead.
func (*TradeOrder) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{7}
}

func (x *TradeOrder) GetCriteria() string {
	if x != nil {
		return x.Criteria
	}
	return ""
}

type TradeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Which symbol trades are being filtered on.
	BySymbols []string `protobuf:"bytes,1,rep,name=by_symbols,json=bySymbols,proto3" json:"by_symbols,omitempty"`
	//*
	// Allow filtering by date ranges.
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	//*
	// Return trades for a particular strategy.
	ByStrategy []string `protobuf:"bytes,4,rep,name=by_strategy,json=byStrategy,proto3" json:"by_strategy,omitempty"`
	//*
	// Filter by trades with atleast this gain probability.
	MinGain float64 `protobuf:"fixed64,5,opt,name=min_gain,json=minGain,proto3" json:"min_gain,omitempty"`
	//*
	// Filter by trades with atleast this much payoff.
	MinProfit float64 `protobuf:"fixed64,6,opt,name=min_profit,json=minProfit,proto3" json:"min_profit,omitempty"`
}

func (x *TradeFilter) Reset() {
	*x = TradeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeFilter) ProtoMessage() {}

func (x *TradeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeFilter.ProtoReflect.Descriptor instead.
func (*TradeFilter) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{8}
}

func (x *TradeFilter) GetBySymbols() []string {
	if x != nil {
		return x.BySymbols
	}
	return nil
}

func (x *TradeFilter) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *TradeFilter) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *TradeFilter) GetByStrategy() []string {
	if x != nil {
		return x.ByStrategy
	}
	return nil
}

func (x *TradeFilter) GetMinGain() float64 {
	if x != nil {
		return x.MinGain
	}
	return 0
}

func (x *TradeFilter) GetMinProfit() float64 {
	if x != nil {
		return x.MinProfit
	}
	return 0
}

type ListTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterBy *TradeFilter `protobuf:"bytes,1,opt,name=filter_by,json=filterBy,proto3" json:"filter_by,omitempty"`
	OrderBy  *TradeOrder  `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListTradesRequest) Reset() {
	*x = ListTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTradesRequest) ProtoMessage() {}

func (x *ListTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTradesRequest.ProtoReflect.Descriptor instead.
func (*ListTradesRequest) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{9}
}

func (x *ListTradesRequest) GetFilterBy() *TradeFilter {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *ListTradesRequest) GetOrderBy() *TradeOrder {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type ListTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTradesResponse) Reset() {
	*x = ListTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTradesResponse) ProtoMessage() {}

func (x *ListTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTradesResponse.ProtoReflect.Descriptor instead.
func (*ListTradesResponse) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{10}
}

type RemoveTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterBy  *TradeFilter `protobuf:"bytes,1,opt,name=filter_by,json=filterBy,proto3" json:"filter_by,omitempty"`
	LogTrades bool         `protobuf:"varint,2,opt,name=log_trades,json=logTrades,proto3" json:"log_trades,omitempty"`
}

func (x *RemoveTradesRequest) Reset() {
	*x = RemoveTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTradesRequest) ProtoMessage() {}

func (x *RemoveTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTradesRequest.ProtoReflect.Descriptor instead.
func (*RemoveTradesRequest) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveTradesRequest) GetFilterBy() *TradeFilter {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *RemoveTradesRequest) GetLogTrades() bool {
	if x != nil {
		return x.LogTrades
	}
	return false
}

type RemoveTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTradesResponse) Reset() {
	*x = RemoveTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_trades_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTradesResponse) ProtoMessage() {}

func (x *RemoveTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_trades_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTradesResponse.ProtoReflect.Descriptor instead.
func (*RemoveTradesResponse) Descriptor() ([]byte, []int) {
	return file_protos_trades_proto_rawDescGZIP(), []int{12}
}

var File_protos_trades_proto protoreflect.FileDescriptor

var file_protos_trades_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0xaf, 0x01, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x78, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x73, 0x22, 0x66, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x6f, 0x6f,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x6f, 0x6f, 0x6b,
	0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x67, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6f,
	0x66, 0x66, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x61,
	0x79, 0x6f, 0x66, 0x66, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6f,
	0x66, 0x66, 0x47, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6f, 0x66, 0x66, 0x5f, 0x62, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x42, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22,
	0x14, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22,
	0xc1, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x66, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xe9, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x74,
	0x64, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_trades_proto_rawDescOnce sync.Once
	file_protos_trades_proto_rawDescData = file_protos_trades_proto_rawDesc
)

func file_protos_trades_proto_rawDescGZIP() []byte {
	file_protos_trades_proto_rawDescOnce.Do(func() {
		file_protos_trades_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_trades_proto_rawDescData)
	})
	return file_protos_trades_proto_rawDescData
}

var file_protos_trades_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protos_trades_proto_goTypes = []interface{}{
	(*OrderBase)(nil),            // 0: protos.OrderBase
	(*Single)(nil),               // 1: protos.Single
	(*Spread)(nil),               // 2: protos.Spread
	(*Order)(nil),                // 3: protos.Order
	(*Trade)(nil),                // 4: protos.Trade
	(*SaveTradesRequest)(nil),    // 5: protos.SaveTradesRequest
	(*SaveTradesResponse)(nil),   // 6: protos.SaveTradesResponse
	(*TradeOrder)(nil),           // 7: protos.TradeOrder
	(*TradeFilter)(nil),          // 8: protos.TradeFilter
	(*ListTradesRequest)(nil),    // 9: protos.ListTradesRequest
	(*ListTradesResponse)(nil),   // 10: protos.ListTradesResponse
	(*RemoveTradesRequest)(nil),  // 11: protos.RemoveTradesRequest
	(*RemoveTradesResponse)(nil), // 12: protos.RemoveTradesResponse
	(*structpb.Struct)(nil),      // 13: google.protobuf.Struct
}
var file_protos_trades_proto_depIdxs = []int32{
	0,  // 0: protos.Single.order_base:type_name -> protos.OrderBase
	0,  // 1: protos.Spread.order_base:type_name -> protos.OrderBase
	1,  // 2: protos.Spread.singles:type_name -> protos.Single
	1,  // 3: protos.Order.single:type_name -> protos.Single
	2,  // 4: protos.Order.spread:type_name -> protos.Spread
	3,  // 5: protos.Trade.orders:type_name -> protos.Order
	13, // 6: protos.Trade.metadata:type_name -> google.protobuf.Struct
	4,  // 7: protos.SaveTradesRequest.trades:type_name -> protos.Trade
	8,  // 8: protos.ListTradesRequest.filter_by:type_name -> protos.TradeFilter
	7,  // 9: protos.ListTradesRequest.order_by:type_name -> protos.TradeOrder
	8,  // 10: protos.RemoveTradesRequest.filter_by:type_name -> protos.TradeFilter
	5,  // 11: protos.TradeService.SaveTrades:input_type -> protos.SaveTradesRequest
	9,  // 12: protos.TradeService.ListTrades:input_type -> protos.ListTradesRequest
	11, // 13: protos.TradeService.RemoveTrades:input_type -> protos.RemoveTradesRequest
	6,  // 14: protos.TradeService.SaveTrades:output_type -> protos.SaveTradesResponse
	10, // 15: protos.TradeService.ListTrades:output_type -> protos.ListTradesResponse
	12, // 16: protos.TradeService.RemoveTrades:output_type -> protos.RemoveTradesResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_protos_trades_proto_init() }
func file_protos_trades_proto_init() {
	if File_protos_trades_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_trades_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Single); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_trades_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_trades_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Order_Single)(nil),
		(*Order_Spread)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_trades_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_trades_proto_goTypes,
		DependencyIndexes: file_protos_trades_proto_depIdxs,
		MessageInfos:      file_protos_trades_proto_msgTypes,
	}.Build()
	File_protos_trades_proto = out.File
	file_protos_trades_proto_rawDesc = nil
	file_protos_trades_proto_goTypes = nil
	file_protos_trades_proto_depIdxs = nil
}
