// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamerServiceClient is the client API for StreamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StreamerService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*EmptyMessage, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type streamerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerServiceClient(cc grpc.ClientConnInterface) StreamerServiceClient {
	return &streamerServiceClient{cc}
}

func (c *streamerServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StreamerService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamerService_ServiceDesc.Streams[0], "/tdproxy_protos.StreamerService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamerService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type streamerServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *streamerServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerServiceClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/tdproxy_protos.StreamerService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/tdproxy_protos.StreamerService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamerServiceServer is the server API for StreamerService service.
// All implementations must embed UnimplementedStreamerServiceServer
// for forward compatibility
type StreamerServiceServer interface {
	Subscribe(*SubscribeRequest, StreamerService_SubscribeServer) error
	Unsubscribe(context.Context, *Subscription) (*EmptyMessage, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
	mustEmbedUnimplementedStreamerServiceServer()
}

// UnimplementedStreamerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServiceServer struct {
}

func (UnimplementedStreamerServiceServer) Subscribe(*SubscribeRequest, StreamerService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamerServiceServer) Unsubscribe(context.Context, *Subscription) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedStreamerServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedStreamerServiceServer) mustEmbedUnimplementedStreamerServiceServer() {}

// UnsafeStreamerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServiceServer will
// result in compilation errors.
type UnsafeStreamerServiceServer interface {
	mustEmbedUnimplementedStreamerServiceServer()
}

func RegisterStreamerServiceServer(s grpc.ServiceRegistrar, srv StreamerServiceServer) {
	s.RegisterService(&StreamerService_ServiceDesc, srv)
}

func _StreamerService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServiceServer).Subscribe(m, &streamerServiceSubscribeServer{stream})
}

type StreamerService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type streamerServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *streamerServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdproxy_protos.StreamerService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServiceServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamerService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdproxy_protos.StreamerService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamerService_ServiceDesc is the grpc.ServiceDesc for StreamerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tdproxy_protos.StreamerService",
	HandlerType: (*StreamerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _StreamerService_Unsubscribe_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _StreamerService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamerService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/streamer.proto",
}
