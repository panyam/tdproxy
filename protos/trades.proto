
syntax = "proto3";
import "google/protobuf/struct.proto";
option go_package = "tdproxy/protos";
package protos;

message OrderBase {
  bool buy = 1;
  int32 quantity = 2;
  double overridden_premium = 3;
}

message Single {
  OrderBase order_base = 1;
  string symbol = 2;
  string date_string = 3;
  string price_string = 4;
  bool is_call = 5;
}

message Spread {
  OrderBase order_base = 1;
  string name = 2;
  repeated Single singles = 3;
}

message Order {
  oneof details {
    Single single = 1;
    Spread spread = 2;
  }
}

message Trade {
  string trade_id = 1;
  string symbol = 2;
  string date = 3;
  string strategy = 4;
  string outlook = 5;
  repeated Order orders = 6;
  google.protobuf.Struct metadata = 7;

  // Payoffs that user can provide
  double payoff_expected_gain = 8;
  double payoff_expected_loss = 9;
  double payoff_gain_prob = 10;
  double payoff_bpe = 11;
  double payoff_maxprofit = 12;

  string load_date = 13;
}

service TradeService {
  rpc GetTrades(GetTradesRequest) returns (GetTradesResponse) {}
  rpc SaveTrades(SaveTradesRequest) returns (SaveTradesResponse) {}
  rpc ListTrades(ListTradesRequest) returns (ListTradesResponse) {}
  rpc RemoveTrades(RemoveTradesRequest) returns (RemoveTradesResponse) {}
}

message GetTradesRequest {
  repeated string trade_ids = 1;
}

message GetTradesResponse {
  map<string, Trade> trades = 1;
}

message SaveTradesRequest {
  repeated Trade trades = 1;
  bool log_trades = 2;
}

message SaveTradesResponse {
}

message TradeOrder {
  string criteria = 1;
}

message TradeFilter {
  /**
   * Which symbol trades are being filtered on.
   */
  repeated string by_symbols = 1;

  /**
   * Allow filtering by date ranges.
   */
  string start_date = 2;
  string end_date = 3;

  /**
   * Return trades for a particular strategy.
   */
  repeated string by_strategy = 4;

  /**
   * Filter by trades with atleast this gain probability.
   */
  double min_gain = 5;

  /**
   * Filter by trades with atleast this much payoff.
   */
  double min_profit = 6;
}

message ListTradesRequest {
  TradeFilter filter_by = 1;
  TradeOrder order_by = 2;
}

message ListTradesResponse {
}

message RemoveTradesRequest {
  TradeFilter filter_by = 1;
  bool log_trades = 2;
}

message RemoveTradesResponse {
}
